name: Build PHP
on:
  push:
  pull_request:
  repository_dispatch:
  schedule:
    - cron: '0 0 * * *'
jobs:
  build:
    name: Build PHP ${{ matrix.php-version }} on ${{ matrix.operating-system }}
    if: "!contains(github.event.head_commit.message, 'skip-build')"
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-20.04, ubuntu-18.04, ubuntu-16.04]
        php-version: ['8.0', '8.1']
        include:
          - operating-system: ubuntu-20.04
            libs: "libgccjit-10-dev"
          - operating-system: ubuntu-18.04
            libs: "libgccjit-8-dev"
          - operating-system: ubuntu-16.04
            libs: "libgccjit-6-dev"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check release
        id: check
        run: bash scripts/check_version.sh
        env:
          PHP_VERSION: ${{ matrix.php-version }}
          COMMIT: ${{ github.event.head_commit.message }}
      - name: Install required packages
        env:
          libs: ${{ matrix.libs }}
        run: |
          if [[ "${{ github.event.head_commit.message }}" = *build-all* ]] || [ "${{ steps.check.outputs.build }}" != "no" ]; then
            bash scripts/install-requirements.sh
          fi
      - name: Build and package
        run: bash scripts/build.sh
        env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_MESSAGE: ${{ github.event.head_commit.message }}
          GITHUB_NAME: 'Shivam Mathur'
          GITHUB_EMAIL: ${{ secrets.email }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PHP_VERSION: ${{ matrix.php-version }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: php_${{ matrix.php-version }}+${{ matrix.operating-system }}
          path: |
            /usr/local/php/*.xz
            /usr/local/php/*.zst
      - name: Check php-cli version
        if: steps.check.outputs.build != 'no'
        run: php -v
      - name: Check php-cgi version
        if: steps.check.outputs.build != 'no'
        run: php-cgi -v
      - name: Check php-fpm version
        if: steps.check.outputs.build != 'no'
        run: |
          php-fpm -v
          sudo service php${{ matrix.php-version }}-fpm status
      - name: Check phpdbg version
        if: steps.check.outputs.build != 'no'
        run: phpdbg -V
      - name: Check pecl version
        if: steps.check.outputs.build != 'no'
        run: pecl -V
      - name: Check php-config version
        if: steps.check.outputs.build != 'no'
        run: php-config --version
      - name: Check phpize version
        if: steps.check.outputs.build != 'no'
        run: phpize -v
      - name: Check php extensions
        if: steps.check.outputs.build != 'no'
        run: php -m
      - name: Check SAPI
        if: steps.check.outputs.build != 'no'
        run: |
          sudo rm -rf /var/www/html/index.html
          echo "<?php echo current(explode('-', php_sapi_name())).':'.strtolower(current(explode('/', \$_SERVER['SERVER_SOFTWARE']))).\"\n\";" | sudo tee /var/www/html/index.php >/dev/null
          for sapi in apache2handler:apache fpm:apache cgi:apache fpm:nginx; do
            echo "::group::Test $sapi"
            sudo switch_sapi $sapi >/dev/null 2>&1
            curl -s http://localhost
            [ "$(curl -s http://localhost)" != "$sapi" ] && exit 1
            echo "::endgroup::"
          done
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip-release')"
    needs: build
    steps:
      - uses: actions/checkout@v2
      - run: mkdir builds
      - uses: actions/download-artifact@v2
        with:
          path: builds
      - name: Release
        run: bash scripts/release.sh
        env:
          GITHUB_MESSAGE: ${{ github.event.head_commit.message }}
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
